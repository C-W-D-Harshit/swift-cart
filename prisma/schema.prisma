generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  email          String      @unique @db.VarChar(255)
  hashedPassword String      @db.VarChar(255)
  fullName       String?     @db.VarChar(100)
  phoneNumber    String?     @unique @db.VarChar(20)
  avatarUrl      String?
  avatarPublicId String?
  role           Role        @default(USER)
  isActive       Boolean     @default(true)
  isDeleted      Boolean     @default(false)
  lastLoginAt    DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relationships
  orders         Order[]
  cart           Cart?
  reviews        Review[]
  addresses      Address[]

  @@map("users")
  @@index([email])
}

model Product {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(200)
  description   String    @db.Text
  slug          String    @unique
  price         Decimal?  @db.Decimal(10, 2)
  stock         Int?      
  sku           String?   @unique @db.VarChar(50)
  images        String[]  // For products without variations
  imagePublicIds  String[]  // For products without variations
  isActive      Boolean   @default(true)
  isDeleted     Boolean   @default(false)
  isPublished   Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  reviews       Review[]
  variations    ProductVariation[]
  attributes    Attribute[]        // New relationship

  @@map("products")
  @@index([categoryId])
  @@index([slug])
  @@index([isPublished, isDeleted])
}

model Attribute {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(50) // e.g., "Color", "Size", "Material"
  description   String?   @db.Text
  isRequired    Boolean   @default(false)
  displayOrder  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  // Relationships
  products      Product[]
  values        AttributeValue[]

  @@map("attributes")
  @@unique([name])
  @@index([displayOrder])
}

model AttributeValue {
  id          String    @id @default(cuid())
  value       String    // e.g., "Red", "XL", "Cotton"
  
  // Relationships
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String
  variations  ProductVariation[]

  @@map("attribute_values")
  @@unique([value, attributeId])
}

model ProductVariation {
  id            String    @id @default(cuid())
  sku           String    @unique
  price         Decimal   @db.Decimal(10, 2)
  comparePrice  Decimal?  @db.Decimal(10, 2)  // Original/before discount price
  stock         Int       @default(0)
  weight        Decimal?  @db.Decimal(10, 3)
  dimensions    Json?     // {length, width, height}
  images        String[]
  imagePublicIds  String[]
  isActive      Boolean   @default(true)
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  attributes    AttributeValue[]  // Changed from options
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]

  @@map("product_variations")
  @@index([productId])
  @@index([sku])
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  imageUrl      String?
  imagePublicId String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  // Relationships
  products      Product[]
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId      String?
  children      Category[] @relation("CategoryHierarchy")

  @@map("categories")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique  // Human readable order number
  status          OrderStatus   @default(PENDING)
  total           Decimal       @db.Decimal(10, 2)
  subtotal        Decimal       @db.Decimal(10, 2)
  tax             Decimal       @db.Decimal(10, 2)
  shipping        Decimal       @db.Decimal(10, 2)
  shippingAddress Json         // Stored as JSON to keep address snapshot
  billingAddress  Json?        // Optional different billing address
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod?
  paymentIntentId String?      // For payment gateway reference
  notes           String?       @db.Text
  trackingNumber  String?      
  carrierName     String?
  cancelReason    String?      @db.Text
  refundedAmount  Decimal?     @db.Decimal(10, 2)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relationships
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  orderItems     OrderItem[]

  @@map("orders")
  @@index([userId])
  @@index([orderNumber])
  @@index([status, paymentStatus])
  @@index([userId, createdAt])
}

model OrderItem {
  id            String   @id @default(cuid())
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  
  // Relationships
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String
  variation     ProductVariation  @relation(fields: [variationId], references: [id])
  variationId   String

  @@map("order_items")
  @@index([orderId])
  @@index([variationId])
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id            String   @id @default(cuid())
  quantity      Int
  
  // Relationships
  cart          Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId        String
  variation     ProductVariation  @relation(fields: [variationId], references: [id])
  variationId   String

  @@map("cart_items")
  @@index([cartId])
  @@index([variationId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  variation   ProductVariation? @relation(fields: [variationId], references: [id])
  variationId String?

  @@map("reviews")
  @@index([userId])
  @@index([productId])
  @@index([variationId])
}

model Address {
  id           String   @id @default(cuid())
  street       String
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean  @default(false)
  
  // Relationships
  user         User     @relation(fields: [userId], references: [id])
  userId       String

  @@map("addresses")
  @@index([userId])
}

enum Role {
  ADMIN
  USER
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAYMENT_PENDING
  PAYMENT_FAILED
  CONFIRMED
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
  RETURNED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  PARTIALLY_REFUNDED
  REFUNDED
  FAILED
  EXPIRED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CRYPTO
}